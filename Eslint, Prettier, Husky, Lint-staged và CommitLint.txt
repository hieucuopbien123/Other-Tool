Tất cả các repo nổi đều code tuân theo 1 chuẩn chung. VD quy ước về dấu ; ở cuối hàm hay khoảng trăng ở tên function, hay cả tên commit khi push lên cũng đều có chuẩn như feat/fix:... chứ k được ghi bừa. Các tool này sẽ giúp tự động làm điều đó. 
Gitlab cũng là 1 nơi cung repo như github thôi chả có gì hot.

Eslint phân tích code JS để xác định đoạn code có lỗi or khả năng là có lỗi và tự fix chúng cho ta. Hiện VSC support Eslint detect lỗi trực tiếp tại thời điểm viết code và có thể tự động fix khi save. Bên cạnh Eslint có nhiều tool khác như JSLint, JSHint nhưng Eslint là tốt nhất.
Cách cài: Dùng VSC tải extension Eslint -> ctrl shift p -> open setting -> thêm:
"editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.fixAll.tslint": true //file typescript
},
"eslint.validate": [ "javascript", "javascriptreact", "html", "typescriptreact" ] //với các file có ngôn ngữ cần check
=> Nếu k dùng VSC thì thao tác sẽ phức tạp hơn ta k xét
Đó là cách check trực tiếp nhờ tool của VSC. Nếu ta k dùng VSC k có extension và file setting như v thì có thể thêm script vào file package.json:
{
    "scripts": {
        "eslint": "eslint đường/dẫn/tới/thư/mục/src/muốn/dùng",
        ...
    }
    ...
}=> npm run eslint là xong và mỗi lần muốn dùng eslint là phải chạy lệnh này or npm run eslint -- --fix để tự động sửa 1 số TH nhanh
Cách dùng: npm install --save-dev eslint
Eslint còn cho dùng các plugin để mở rộng hoạt động của nó VD trong ReactJS ta dùng: npm install --save-dev eslint-plugin-react
Ta có thể cấu hình bằng cách thêm comment vào code JS VD: /* eslint quotes: ["error", "double"], curly: 2 */ => k nên dùng như v
Tạo file global .eslintrc.js(đuôi .js có thể đổi tùy vào ngông ngữ ta thích dùng VD có thể là json, yml,.. or có thể ghi TT config vào file package.json) nhưng dù dùng đuôi nào thì cũng có các chuẩn chung: 
{
  "plugins": [
      "react"
  ],
  ...
}=> dùng plugins để mở rộng hoạt động của ESLint VD ở đây sẽ check cả với code JSX
{
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended"
    ],
    ...
}=> extends có config có sẵn và có thể thêm vào config của riêng ta. Ở đây ta sử dụng cấu hình của người khác làm tích hợp sẵn trong eslint với eslint:recommended và react/recommended. Tương tự trên github còn có nhiều người làm sẵn các cấu hình eslint cho người dùng tải về để dùng xong chỉ cần thêm vào extends này là xong. VD strongloop
{
    "rules": {
        "quotes": [//string dùng '
            2,
            "single"
        ],
        "react/jsx-uses-react": 2,//check code jsx
	"indent": [//lùi dòng phải chuẩn 2 space. Với switch case thì chỉ 1
            2,
            2(or "tab" nếu lấy 1 tab),
            {
                "SwitchCase": 1
            }
        ],
        "linebreak-style": [//dùng line-break khác nhau ở 2 hđh
            2,
            "unix"
        ],
        "semi": [//luôn có dấu ; ở cuối hàm
            2,
            "always"
        ],
        "curly": [//phải có {} chứ k được bỏ nhanh như kiểu if else
            2,
            "all"
        ],
        "camelcase": [//tuân thủ camel case(k phải tất cả luôn là camelcase nhé)
            2,
            {
                "properties": "always"
            }
        ],
        "eqeqeq": [//phải dùng === or !== khi so sánh bằng và khác. "smart" tức là trừ các TH ss với typeof, literal value, ss với null thì k dùng === và !==
            2,
            "smart"
        ],
        "one-var-declaration-per-line": [//always thì 1 line là declaration(k khởi tạo giá trị ban đầu) 1 var, initializations thì 1 line là initialization of 1 var
            2,
            "always"
        ],
        "new-cap": [//new Constructor phải viết hoa tên Constructor
	    2,
	    {
	    	"capIsNew": true/false
	    }
	]
        "no-case-declarations": 0//let const function class khai báo trong case của switch case thì phải có { } bao case đó. var thì thoải mái
	"no-empty": "warn",//cấm {} bị bỏ trống bên trong {}
    }
    ...
}=> rulese có quy tắc mà code phải tuân theo. mỗi rule có 2 thông số: 1 là off(0), warn(1), error(2) và các tùy chọn. Tùy chọn có thể bỏ qua. VD trên là ap dụng dấu ' cho mọi string trong code và kiếm tra import có đúng không, nếu sai sẽ trả ra error với exit code là 1.
Mọi rule: https://eslint.org/docs/rules/ => gần như đầy đủ mọi thứ
{
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },
    ...
} => ESlint mặc định check ES5, với ES6 trở đi phải cấu hình bằng parserOptions và cả JSX cũng phải cấu hình ở đây. Ở trên là cấu hình chuẩn cho code JSX và cả version ES6
{
    "env": {
        "browser": true,
        "es6": true
    },
    ...
} => cấu hình môi trường mà code chạy. VD browser có biến window, document còn ES6 sẽ có các kiểu dữ liệu mới như Set chẳng hạn
{
    "globals": {
        "arguments": true,
        ...
    }
}=> nơi đưa danh sách các biến global dùng trong dự án. Nếu không khi truy cập vào biến global nào đó thì ESLint sẽ báo lỗi truy cập biến chưa định nghĩa, nên list toàn bộ biến global ra. 1 số biến global như window, document không cần định nghĩa lại vì env đã có sắn r. Trong JS có 1 object truyền vào hàm là arguments mà không có môi trường định nghĩa nó. Nếu muốn sử dụng phải đưa vào global như trên.

Bên cạnh việc dùng VSC tự động hay gõ lệnh nhiều lần, ta có thể tự động hóa mỗi khi commit lên git thì tự chạy ESLint bằng cách sử dụng git hook pre-commit. Nếu đã có file pre-commit thì chỉ cần sửa  file đó. Nếu chưa thì tạo mới bằng cách sử dụng mẫu trong file ẩn .git
=> cp .git/hooks/pre-commit.sample .git/hooks/pre-commit
-> 2 dòng cuối sửa thành:
set -e
npm run eslint

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
=> thế là xong


Prettier là code formatter. Eslint cũng format code nhưng có nhiều TH buộc dùng Prettier mới được. Kết hợp 2 cái này thì code của ta sẽ luôn được check lỗi và format rất ok. Thực tế ta có thể check được mọi lỗi format với Eslint nhưng sẽ rất phức tạp và rất dài. Có những cái dùng prettier 1 hit là xong nên dùng prettier hơn. Nó chỉ là 1 tool format được xây dựng hợp với eslint(or mọi linter khác) thôi.
Trong VSC cũng có sẵn formatter nhưng ta k nên dùng nó mà nên thay nó bằng Prettier vì formatter có sẵn bị lỗi với code JSX. Nếu đã set sẵn formatter rồi có thể đổi trong open setting JSON của VSC.
Cách cài: tải extension Prettier-> ctrl shift p -> format-> chọn configure formatter chọn là prettier(thực chất VSC cũng có formatter code mặc định)-> đặt phím tắt nếu thích-> mỗi lần cần format là làm như v.
Prettier thiên về kiểu căn lề, khoảng cách. Còn Eslint thiên về coding style dấu chấm phẩy, cách đặt tên biến và nó cũng bao cả chức năng của prettier.
-> ctrl + , -> chỉnh cài đặt formatting cho VSC-> chỉnh các tính năng khác như format on save để save tự động format.

Tuy nhiên khi làm việc kp ai cũng dùng VSC và kp ai cũng cài extension prettier nên người ta thg dùng CLI của Prettier dưới dạng package và dùng file cấu hình để chỉnh vì k thể mỗi người có 1 cấu hình prettier riêng được:
npm install --save-dev --save-exact prettier -> tạo file mới đặt tên là .prettierrc.extension(bỏ .extension cũng được và nó tự hiểu là json) và bên trong:
{
  "printWidth": 120,
  "singleQuote": false,
  "tabWidth": 2,
  "semi": true,
  "trailingComma": "es5"
}
=> sau đó mỗi lần format bằng prettier dùng: npx prettier --write .
=> chú ý nếu ta có extension xong vẫn dùng package mọi thứ như bth nhé và cấu hình nó tự đồng bộ thoải mái

Dùng Prettier kết hợp Eslint: k chơi với extension Prettier Eslint mà sẽ thao tác với CLI. Thực chất để bình thường thì eslint và prettier được kết hợp r nhưng các thuộc tính trùng nhau của 2 cái chưa được xử lý nên phải cài thêm package.
Cài: npm install -g prettier eslint -> npm install --save-dev eslint-config-prettier để loại bỏ các eslint rule mà conflict với prettier
((
-> npm install eslint-plugin-prettier tích hợp các prettier rules với eslint rules => ở trong .eslintrc.json thêm 1 rule
"rules": {
    "prettier/prettier": ["error"]
}
))
=> thông thường k cần quá cồng kềnh như v mà chỉ cần cài prettier(package or extension đều được) + eslint và eslint-config-prettier phát là xong dùng như bth thôi. Nếu VSC có sẵn prettier thì k cần cái prettier nx cx đc(package.json có thì vẫn cài cho đồng bộ chứ chả dung)


Lint-Staged: khi ta format code bằng prettier(k dùng extension auto save mà dùng package cơ, mặc định đi vì mọi người trong team chắc gì họ đã có extension) thì phải chạy lệnh npx prettier --write . -> nhưng ta chẳng hạn có 100 file mà mỗi lần chạy như v sẽ format toàn bộ mất thời gian, ta chỉ muốn format các file đã thay đổi mà thôi. Ta sẽ tận dụng lint-staged chỉ format các file ở trạng thái staged của git mà thôi
Cách cài: npm install --save-dev lint-staged -> vào package.json thêm vào cấu hình "lint-staged":{...} -> ở đây ta định nghĩa tập hợp các lệnh với các file ở trong trạng thái staged nếu có thay đổi thì chạy ntn. VD: 
"lint-staged": {
    "*.ts": [
      "prettier --write",
      "git add ."
    ]
}
sau đó thêm script: "lint:staged": "lint-staged" để dùng npm run lint:staged sẽ chạy toàn bộ các file xác định ở trên là đuôi .ts và chạy lần lượt các lệnh. Chú ý ta thêm git add . ở cuối đề phòng TH nếu có sự thay đổi thật thì sẽ add lại luôn mà ta k cần chạy lại
=> Nch là nếu dùng prettier với formatonsave thì lint stage chả cần. 

Husky là tool bắt event khi add or commit lên git repo. Bắt được, ta có thể xử lý kiểu nếu code chưa đúng coding style sẽ k cho commit. Husky và lint-staged đảm bảo code 1 khi đã commit thì luôn chuẩn clean code. 
Cài: npm install --save-dev husky -> khởi tạo: npx husky install -> xuất hiện thư mục .husky -> gõ command: npx husky add .husky/pre-commit "yarn lint-staged" sẽ bắt khi user gõ: git commit và sẽ tự chạy command yarn lint-staged -> nó tự sinh ra file pre-commit trong .husky chưa thông tin về lệnh đó. 
Để đảm bảo code chung với mn thì quá trình setup husky được tự động với tất cả thì trong package.json thêm script: "postinstall": "husky install" => thì mọi thứ sẽ tự động được setup khi 1 người mới tham gia vào dự án gọi npm/yarn install
Bh add r commit -> husky bắt được-> gọi lint-staged -> thực hiện prettier-> xong. Do nó thực hiện prettier mà có cài với eslint nên nếu coding style k chuẩn thì nó cũng báo lỗi khi commit
Bên cạnh đó eslint và prettier kết hợp sẽ tự fix format cho code nhưng nếu eslint báo error và prettier k fix được vì VD lỗi biến k sử dụng thì prettier chỉ format lại chứ đâu có tự dùng lại biến được và khi đó husky báo lỗi và k commit được file đó-> file 1 khi đã commit sẽ luôn tuân thủ quy tắc code style. Trong dự án leader board ở cuối lint-staged k có git add . nên bảo sao commit lên code vẫn k clean

CommitLint đảm bảo commit message phải chuẩn
Cài: npm install --save-dev @commitlint/config-conventional và npm install --save-dev @commitlint/cli -> config-conventional là cấu hình commit dựa theo chuẩn commit của Angular -> setup husky bắt commit message: npx husky add .husky/commit-msg "" -> hiện file .husky/commit-msg -> mở file đó ra và sửa undefined thành: npx --no-install commitlint --edit "$1"
-> tức là lấy commit message của cái commit gần nhất. Tạo file .commitlintrc.js -> bên trong viết: module.exports = {extends: ['@commitlint/config-conventional']}; -> xong
=> Để commit buộc phải theo chuẩn message là: type(scope?): subject với:
type ở trên có thể là:
	build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
	ci: Changes to our CI configuration files and scripts (example scopes: Gitlab CI, Circle, BrowserStack, SauceLabs)
	chore: add something without touching production code (Eg: update npm dependencies)
	docs: Documentation only changes
	feat: A new feature
	fix: A bug fix
	perf: A code change that improves performance
	refactor: A code change that neither fixes a bug nor adds a feature
	revert: Reverts a previous commit
	style: Changes that do not affect the meaning of the code (Eg: adding white-space, formatting, missing semi-colons, etc)
	test: Adding missing tests or correcting existing tests
scope thì là optional, và nếu có thì nó nên là tên của package mà commit hiện tại làm ảnh hưởng. Mình thấy scope thường dùng ở các repository mà chứa nhiều 		packages dạng monorepo, ví dụ repo của Vue 3, scope sẽ là tên của 1 package nào đó ở folder packages
subject là nội dung của commit
=> ta cũng có thể thêm các chuẩn riêng của ta vào commit lint xem trên trang git hướng dẫn nhưng kệ mẹ, dùng chuẩn có sẵn đi.

Tool husky có thể k check được nếu thêm option --no-verify, VD: git commit -m "test dummy message" --no-verify -> vẫn commit như thg kể cả commitLint. Điều này có thể fix băng CICD của gitlab nhưng thôi h chưa động tới.


